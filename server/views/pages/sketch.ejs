<!DOCTYPE html>
<html lang="en">
<head>
	<% include ../partials/head %>
</head>
<body onload="init()">
	<script type="text/javascript">
    var canvas, ctx, flag = false,
        prevX = 0,
        currX = 0,
        prevY = 0,
        currY = 0,
        dot_flag = false;

    var x = "black",
        y = 2;
    
    function init() {
        canvas = document.getElementById('can');
        ctx = canvas.getContext("2d");
        w = canvas.width;
        h = canvas.height;
    
        canvas.addEventListener("mousemove", function (e) {
            findxy('move', e)
            //console.log("mouse move; ", e);
            // only send if there is a mouse click while moving
            if(e.buttons === 1){
            	sendPoint(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);
            }
            
        }, false);
        canvas.addEventListener("mousedown", function (e) {
            findxy('down', e)
            console.log("mouse down; ", e);
        }, false);
        canvas.addEventListener("mouseup", function (e) {
            findxy('up', e)
            console.log("mouse up; ", e);
        }, false);
        canvas.addEventListener("mouseout", function (e) {
            findxy('out', e)
            console.log("mouse out; ", e);
        }, false);
    }
    
    function color(obj) {
        switch (obj.id) {
            case "green":
                x = "green";
                break;
            case "blue":
                x = "blue";
                break;
            case "red":
                x = "red";
                break;
            case "yellow":
                x = "yellow";
                break;
            case "orange":
                x = "orange";
                break;
            case "black":
                x = "black";
                break;
            case "white":
                x = "white";
                break;
        }
        if (x == "white") y = 14;
        else y = 2;
    
    }
    
    function draw() {
        ctx.beginPath();
        ctx.moveTo(prevX, prevY);
        ctx.lineTo(currX, currY);
        ctx.strokeStyle = x;
        ctx.lineWidth = y;
        ctx.stroke();
        ctx.closePath();
    }
    
    function erase() {
        var m = confirm("Want to clear");
        if (m) {
            ctx.clearRect(0, 0, w, h);
            document.getElementById("canvasimg").style.display = "none";
        }
    }
    
    function save() {
        document.getElementById("canvasimg").style.border = "2px solid";
        var dataURL = canvas.toDataURL();
        document.getElementById("canvasimg").src = dataURL;
        document.getElementById("canvasimg").style.display = "inline";
    }
    
    function findxy(res, e) {
        if (res == 'down') {
            prevX = currX;
            prevY = currY;
            currX = e.clientX - canvas.offsetLeft;
            currY = e.clientY - canvas.offsetTop;
    
            flag = true;
            dot_flag = true;
            if (dot_flag) {
                ctx.beginPath();
                ctx.fillStyle = x;
                ctx.fillRect(currX, currY, 2, 2);
                ctx.closePath();
                dot_flag = false;
            }
        }
        if (res == 'up' || res == "out") {
            flag = false;
        }
        if (res == 'move') {
            if (flag) {
                prevX = currX;
                prevY = currY;
                currX = e.clientX - canvas.offsetLeft;
                currY = e.clientY - canvas.offsetTop;
                draw();
            }
        }
    }

    function sendPointSuccess(msgType, msgData){
    	console.log("point sent ", msgData);
    }

    function sendPointFailure(errorCode, errorText){
    	console.log("error sending point ", errorText);
    }

    function sendPoint(x, y){
    	console.log("INSIDE SENDING POINT: ", x, y);
    	easyrtc.sendPeerMessage("destination", "point", 
    		{x: x, y: y}, sendPointSuccess, sendPointFailure);
    }
    </script>
	<header>
		<% include ../partials/header %>
	</header>

	<main style="min-height:600px;">
	<div class="container canvas-container">
		<div class="tools-container">
			Choose Color
			<ul class="color-box-list">
				<li class="color-box" id="green" onclick="color(this)"></li>
				<li class="color-box" id="blue" onclick="color(this)"></li>
				<li class="color-box" id="red" onclick="color(this)"></li>
		        <li class="color-box" id="yellow" onclick="color(this)"></li>
		        <li class="color-box" id="orange" onclick="color(this)"></li>
		        <li class="color-box" id="black" onclick="color(this)"></li>
			</ul>
		</div>
		
		<div class="tools-container">
			Eraser
			<ul class="color-box-list">
				<li class="color-box" id="white" onclick="color(this)"></li>
			</ul>
		</div>

		<canvas id="can" width="500" height="400"></canvas>

		<div class="form-group">
			<button id="btn" onclick="save()" class="btn btn-primary">Save</button>
        	<button id="clr" onclick="erase()" class="btn btn-default">Clear</button>	
		</div>
		
	</div>
		
        
        
        
        
        
        <img id="canvasimg" style="position:absolute;top:10%;left:52%;" style="display:none;">
        
	</main>
	

	<footer>
		<% include ../partials/footer %>
	</footer>

</body>

</html>